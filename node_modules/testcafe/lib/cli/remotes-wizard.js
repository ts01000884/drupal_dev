'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _qrcodeTerminal = require('qrcode-terminal');

var _qrcodeTerminal2 = _interopRequireDefault(_qrcodeTerminal);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

var _promisifyEvent = require('promisify-event');

var _promisifyEvent2 = _interopRequireDefault(_promisifyEvent);

var _dedent = require('dedent');

var _dedent2 = _interopRequireDefault(_dedent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (testCafe, remoteCount, showQRCode) {
        var connectionPromises = [];

        if (remoteCount) {
            _log2.default.hideSpinner();

            var description = (0, _dedent2.default)(`
            Connecting ${remoteCount} remote browser(s)...
            Navigate to the following URL from each remote browser.
        `);

            _log2.default.write(description);

            if (showQRCode) _log2.default.write('You can either enter the URL or scan the QR-code.');

            var connectionUrl = testCafe.browserConnectionGateway.connectUrl;

            _log2.default.write(`Connect URL: ${_chalk2.default.underline.blue(connectionUrl)}`);

            if (showQRCode) _qrcodeTerminal2.default.generate(connectionUrl);

            for (var i = 0; i < remoteCount; i++) {
                connectionPromises.push(testCafe.createBrowserConnection().then(function (bc) {
                    return (0, _promisifyEvent2.default)(bc, 'ready').then(function () {
                        return bc;
                    });
                }).then(function (bc) {
                    _log2.default.hideSpinner();
                    _log2.default.write(`${_chalk2.default.green('CONNECTED')} ${bc.userAgent}`);
                    _log2.default.showSpinner();
                    return bc;
                }));
            }

            _log2.default.showSpinner();
        }

        return yield _pinkie2.default.all(connectionPromises);
    });

    return function (_x, _x2, _x3) {
        return _ref.apply(this, arguments);
    };
})();

module.exports = exports['default'];