'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _testcafeBrowserTools = require('testcafe-browser-tools');

var _testcafeBrowserTools2 = _interopRequireDefault(_testcafeBrowserTools);

var _delay = require('../../../utils/delay');

var _delay2 = _interopRequireDefault(_delay);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const POST_OPERATION_DELAY = 500;

class OperationsQueue {
    constructor() {
        this.chainPromise = _pinkie2.default.resolve();
    }

    executeOperation(operation) {
        const operationPromise = this.chainPromise.then(operation);

        this.chainPromise = operationPromise.then(() => (0, _delay2.default)(POST_OPERATION_DELAY));

        return operationPromise;
    }
}

class BrowserStarter {
    constructor() {
        // NOTE: You can't start multiple instances of the same app at the same time on macOS.
        // That's why a queue of opening requests is needed.
        this.macOSBrowserOpeningQueue = new OperationsQueue();
    }

    startBrowser(...openArgs) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const openBrowserOperation = function openBrowserOperation() {
                return _testcafeBrowserTools2.default.open(...openArgs);
            };

            if (_osFamily2.default.mac) yield _this.macOSBrowserOpeningQueue.executeOperation(openBrowserOperation);else yield openBrowserOperation();
        })();
    }
}
exports.default = BrowserStarter;
module.exports = exports['default'];