'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _testcafeBrowserTools = require('testcafe-browser-tools');

var _testcafeBrowserTools2 = _interopRequireDefault(_testcafeBrowserTools);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _connection = require('../connection');

var _connection2 = _interopRequireDefault(_connection);

var _delay = require('../../utils/delay');

var _delay2 = _interopRequireDefault(_delay);

var _clientFunctions = require('./utils/client-functions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const BROWSER_OPENING_DELAY = 2000;

const RESIZE_DIFF_SIZE = {
    width: 100,
    height: 100
};

function sumSizes(sizeA, sizeB) {
    return {
        width: sizeA.width + sizeB.width,
        height: sizeA.height + sizeB.height
    };
}

function subtractSizes(sizeA, sizeB) {
    return {
        width: sizeA.width - sizeB.width,
        height: sizeA.height - sizeB.height
    };
}

class BrowserProvider {
    constructor(plugin) {
        this.plugin = plugin;
        this.initPromise = _pinkie2.default.resolve(false);

        this.isMultiBrowser = this.plugin.isMultiBrowser;
        // HACK: The browser window has different border sizes in normal and maximized modes. So, we need to be sure that the window is
        // not maximized before resizing it in order to keep the mechanism of correcting the client area size working. When browser is started,
        // we are resizing it for the first time to switch the window to normal mode, and for the second time - to restore the client area size.
        this.localBrowsersInfo = {};
    }

    _createLocalBrowserInfo(browserId) {
        if (this.localBrowsersInfo[browserId]) return;

        this.localBrowsersInfo[browserId] = {
            windowDescriptor: null,
            maxScreenSize: null,
            resizeCorrections: null
        };
    }

    _getWindowDescriptor(browserId) {
        return this.localBrowsersInfo[browserId] && this.localBrowsersInfo[browserId].windowDescriptor;
    }

    _getMaxScreenSize(browserId) {
        return this.localBrowsersInfo[browserId] && this.localBrowsersInfo[browserId].maxScreenSize;
    }

    _getResizeCorrections(browserId) {
        return this.localBrowsersInfo[browserId] && this.localBrowsersInfo[browserId].resizeCorrections;
    }

    _isBrowserIdle(browserId) {
        const connection = _connection2.default.getById(browserId);

        return connection.idle;
    }

    _calculateResizeCorrections(browserId) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!_this._isBrowserIdle(browserId)) return;

            var title = yield _this.plugin.runInitScript(browserId, _clientFunctions.GET_TITLE_SCRIPT);

            if (!(yield _testcafeBrowserTools2.default.isMaximized(title))) return;

            var currentSize = yield _this.plugin.runInitScript(browserId, _clientFunctions.GET_WINDOW_DIMENSIONS_INFO_SCRIPT);
            var etalonSize = subtractSizes(currentSize, RESIZE_DIFF_SIZE);

            yield _testcafeBrowserTools2.default.resize(title, currentSize.width, currentSize.height, etalonSize.width, etalonSize.height);

            var resizedSize = yield _this.plugin.runInitScript(browserId, _clientFunctions.GET_WINDOW_DIMENSIONS_INFO_SCRIPT);
            var correctionSize = subtractSizes(resizedSize, etalonSize);

            yield _testcafeBrowserTools2.default.resize(title, resizedSize.width, resizedSize.height, etalonSize.width, etalonSize.height);

            resizedSize = yield _this.plugin.runInitScript(browserId, _clientFunctions.GET_WINDOW_DIMENSIONS_INFO_SCRIPT);

            correctionSize = sumSizes(correctionSize, subtractSizes(resizedSize, etalonSize));

            if (_this.localBrowsersInfo[browserId]) _this.localBrowsersInfo[browserId].resizeCorrections = correctionSize;

            yield _testcafeBrowserTools2.default.maximize(title);
        })();
    }

    _calculateMacSizeLimits(browserId) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!_this2._isBrowserIdle(browserId)) return;

            var sizeInfo = yield _this2.plugin.runInitScript(browserId, _clientFunctions.GET_WINDOW_DIMENSIONS_INFO_SCRIPT);

            if (_this2.localBrowsersInfo[browserId]) {
                _this2.localBrowsersInfo[browserId].maxScreenSize = {
                    width: sizeInfo.availableWidth - (sizeInfo.outerWidth - sizeInfo.width),
                    height: sizeInfo.availableHeight - (sizeInfo.outerHeight - sizeInfo.height)
                };
            }
        })();
    }

    _ensureBrowserWindowDescriptor(browserId) {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this3._getWindowDescriptor(browserId)) return;

            yield _this3._createLocalBrowserInfo(browserId);

            // NOTE: delay to ensure the window finished the opening
            yield _this3.plugin.waitForConnectionReady(browserId);
            yield (0, _delay2.default)(BROWSER_OPENING_DELAY);

            if (_this3.localBrowsersInfo[browserId]) _this3.localBrowsersInfo[browserId].windowDescriptor = yield _testcafeBrowserTools2.default.findWindow(browserId);
        })();
    }

    _ensureBrowserWindowParameters(browserId) {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this4._ensureBrowserWindowDescriptor(browserId);

            if (_osFamily2.default.win && !_this4._getResizeCorrections(browserId)) yield _this4._calculateResizeCorrections(browserId);else if (_osFamily2.default.mac && !_this4._getMaxScreenSize(browserId)) yield _this4._calculateMacSizeLimits(browserId);
        })();
    }

    _closeLocalBrowser(browserId) {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _testcafeBrowserTools2.default.close(_this5._getWindowDescriptor(browserId));
        })();
    }

    _resizeLocalBrowserWindow(browserId, width, height, currentWidth, currentHeight) {
        var _this6 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const resizeCorrections = _this6._getResizeCorrections(browserId);

            if (resizeCorrections && (yield _testcafeBrowserTools2.default.isMaximized(_this6._getWindowDescriptor(browserId)))) {
                width -= resizeCorrections.width;
                height -= resizeCorrections.height;
            }

            yield _testcafeBrowserTools2.default.resize(_this6._getWindowDescriptor(browserId), currentWidth, currentHeight, width, height);
        })();
    }

    _takeLocalBrowserScreenshot(browserId, screenshotPath) {
        var _this7 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _testcafeBrowserTools2.default.screenshot(_this7._getWindowDescriptor(browserId), screenshotPath);
        })();
    }

    _canResizeLocalBrowserWindowToDimensions(browserId, width, height) {
        var _this8 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!_osFamily2.default.mac) return true;

            var maxScreenSize = _this8._getMaxScreenSize(browserId);

            return width <= maxScreenSize.width && height <= maxScreenSize.height;
        })();
    }

    _maximizeLocalBrowserWindow(browserId) {
        var _this9 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _testcafeBrowserTools2.default.maximize(_this9._getWindowDescriptor(browserId));
        })();
    }

    init() {
        var _this10 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var initialized = yield _this10.initPromise;

            if (initialized) return;

            _this10.initPromise = _this10.plugin.init().then(function () {
                return true;
            });

            try {
                yield _this10.initPromise;
            } catch (error) {
                _this10.initPromise = _pinkie2.default.resolve(false);

                throw error;
            }
        })();
    }

    dispose() {
        var _this11 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var initialized = yield _this11.initPromise;

            if (!initialized) return;

            _this11.initPromise = _this11.plugin.dispose().then(function () {
                return false;
            });

            try {
                yield _this11.initPromise;
            } catch (error) {
                _this11.initPromise = _pinkie2.default.resolve(false);

                throw error;
            }
        })();
    }

    isLocalBrowser(browserId, browserName) {
        var _this12 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            return yield _this12.plugin.isLocalBrowser(browserId, browserName);
        })();
    }

    openBrowser(browserId, pageUrl, browserName) {
        var _this13 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this13.plugin.openBrowser(browserId, pageUrl, browserName);

            var isLocalBrowser = yield _this13.plugin.isLocalBrowser(browserId);

            if (isLocalBrowser) yield _this13._ensureBrowserWindowParameters(browserId);
        })();
    }

    closeBrowser(browserId) {
        var _this14 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var isLocalBrowser = yield _this14.plugin.isLocalBrowser(browserId);
            var customActionsInfo = yield _this14.hasCustomActionForBrowser(browserId);
            var hasCustomCloseBrowser = customActionsInfo.hasCloseBrowser;
            var usePluginsCloseBrowser = hasCustomCloseBrowser || !isLocalBrowser;

            if (usePluginsCloseBrowser) yield _this14.plugin.closeBrowser(browserId);else yield _this14._closeLocalBrowser(browserId);

            if (isLocalBrowser) delete _this14.localBrowsersInfo[browserId];
        })();
    }

    getBrowserList() {
        var _this15 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            return yield _this15.plugin.getBrowserList();
        })();
    }

    isValidBrowserName(browserName) {
        var _this16 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            return yield _this16.plugin.isValidBrowserName(browserName);
        })();
    }

    resizeWindow(browserId, width, height, currentWidth, currentHeight) {
        var _this17 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var isLocalBrowser = yield _this17.plugin.isLocalBrowser(browserId);
            var customActionsInfo = yield _this17.hasCustomActionForBrowser(browserId);
            var hasCustomResizeWindow = customActionsInfo.hasResizeWindow;

            if (isLocalBrowser && !hasCustomResizeWindow) {
                yield _this17._resizeLocalBrowserWindow(browserId, width, height, currentWidth, currentHeight);
                return;
            }

            yield _this17.plugin.resizeWindow(browserId, width, height, currentWidth, currentHeight);
        })();
    }

    canResizeWindowToDimensions(browserId, width, height) {
        var _this18 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var isLocalBrowser = yield _this18.plugin.isLocalBrowser(browserId);
            var customActionsInfo = yield _this18.hasCustomActionForBrowser(browserId);
            var hasCustomCanResizeToDimensions = customActionsInfo.hasCanResizeWindowToDimensions;

            if (isLocalBrowser && !hasCustomCanResizeToDimensions) return yield _this18._canResizeLocalBrowserWindowToDimensions(browserId, width, height);

            return yield _this18.plugin.canResizeWindowToDimensions(browserId, width, height);
        })();
    }

    maximizeWindow(browserId) {
        var _this19 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var isLocalBrowser = yield _this19.plugin.isLocalBrowser(browserId);
            var customActionsInfo = yield _this19.hasCustomActionForBrowser(browserId);
            var hasCustomMaximizeWindow = customActionsInfo.hasMaximizeWindow;

            if (isLocalBrowser && !hasCustomMaximizeWindow) return yield _this19._maximizeLocalBrowserWindow(browserId);

            return yield _this19.plugin.maximizeWindow(browserId);
        })();
    }

    takeScreenshot(browserId, screenshotPath, pageWidth, pageHeight) {
        var _this20 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var isLocalBrowser = yield _this20.plugin.isLocalBrowser(browserId);
            var customActionsInfo = yield _this20.hasCustomActionForBrowser(browserId);
            var hasCustomTakeScreenshot = customActionsInfo.hasTakeScreenshot;

            if (isLocalBrowser && !hasCustomTakeScreenshot) {
                yield _this20._takeLocalBrowserScreenshot(browserId, screenshotPath, pageWidth, pageHeight);
                return;
            }

            yield _this20.plugin.takeScreenshot(browserId, screenshotPath, pageWidth, pageHeight);
        })();
    }

    hasCustomActionForBrowser(browserId) {
        var _this21 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            return _this21.plugin.hasCustomActionForBrowser(browserId);
        })();
    }

    reportJobResult(browserId, status, data) {
        var _this22 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this22.plugin.reportJobResult(browserId, status, data);
        })();
    }
}
exports.default = BrowserProvider;
module.exports = exports['default'];