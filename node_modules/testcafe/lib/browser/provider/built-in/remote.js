'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _testcafeBrowserTools = require('testcafe-browser-tools');

var _warningMessage = require('../../../notifications/warning-message');

var _warningMessage2 = _interopRequireDefault(_warningMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    localBrowsersFlags: {},

    openBrowser(browserId) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this.waitForConnectionReady(browserId);

            var localBrowserWindow = yield (0, _testcafeBrowserTools.findWindow)(browserId);

            _this.localBrowsersFlags[browserId] = localBrowserWindow !== null;
        })();
    },

    closeBrowser(browserId) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            delete _this2.localBrowsersFlags[browserId];
        })();
    },

    isLocalBrowser(browserId) {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            return _this3.localBrowsersFlags[browserId];
        })();
    },

    // NOTE: we must try to do a local screenshot or resize, if browser is accessible, and emit warning otherwise
    hasCustomActionForBrowser(browserId) {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var isLocalBrowser = _this4.localBrowsersFlags[browserId];

            return {
                hasCloseBrowser: true,
                hasResizeWindow: !isLocalBrowser,
                hasMaximizeWindow: !isLocalBrowser,
                hasTakeScreenshot: !isLocalBrowser,
                hasCanResizeWindowToDimensions: !isLocalBrowser
            };
        })();
    },

    takeScreenshot(browserId) {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this5.reportWarning(browserId, _warningMessage2.default.browserManipulationsOnRemoteBrowser);
        })();
    },

    resizeWindow(browserId) {
        var _this6 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this6.reportWarning(browserId, _warningMessage2.default.browserManipulationsOnRemoteBrowser);
        })();
    },

    maximizeWindow(browserId) {
        var _this7 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this7.reportWarning(browserId, _warningMessage2.default.browserManipulationsOnRemoteBrowser);
        })();
    }
};
module.exports = exports['default'];