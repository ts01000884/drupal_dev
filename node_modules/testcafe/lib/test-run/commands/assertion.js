'use strict';

exports.__esModule = true;

var _type = require('./type');

var _type2 = _interopRequireDefault(_type);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _options = require('./options');

var _runtime = require('../../errors/runtime');

var _testRun = require('../../errors/test-run');

var _executeJsExpression = require('../execute-js-expression');

var _utils = require('./utils');

var _argument = require('./validations/argument');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Initializers
function initAssertionOptions(name, val) {
    return new _options.AssertionOptions(val, true);
}

//Initializers
function initAssertionParameter(name, val, { skipVisibilityCheck, testRun }) {
    try {
        if ((0, _utils.isJSExpression)(val)) val = (0, _executeJsExpression.executeJsExpression)(val.value, testRun, skipVisibilityCheck);

        return val;
    } catch (err) {
        var msg = err.constructor === _runtime.APIError ? err.rawMessage : err.message;

        throw new _testRun.AssertionExecutableArgumentError(name, val.value, msg);
    }
}

// Commands
class AssertionCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.assertion);
    }

    _getAssignableProperties() {
        return [{ name: 'assertionType', type: _argument.nonEmptyStringArgument, required: true }, { name: 'actual', init: initAssertionParameter, defaultValue: void 0 }, { name: 'expected', init: initAssertionParameter, defaultValue: void 0 }, { name: 'expected2', init: initAssertionParameter, defaultValue: void 0 }, { name: 'message', type: _argument.stringArgument, defaultValue: null }, { name: 'options', type: _argument.actionOptions, init: initAssertionOptions, required: true }];
    }
}
exports.default = AssertionCommand;
module.exports = exports['default'];