'use strict';

exports.__esModule = true;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _readFileRelative = require('read-file-relative');

var _http = require('../../utils/http');

var _remotesQueue = require('./remotes-queue');

var _remotesQueue2 = _interopRequireDefault(_remotesQueue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Const
const IDLE_PAGE_SCRIPT = (0, _readFileRelative.readSync)('../../client/browser/idle-page/index.js');
const IDLE_PAGE_STYLE = (0, _readFileRelative.readSync)('../../client/browser/idle-page/styles.css');
const IDLE_PAGE_LOGO = (0, _readFileRelative.readSync)('../../client/browser/idle-page/logo.svg', true);

// Gateway
class BrowserConnectionGateway {
    constructor(proxy) {
        this.connections = {};
        this.remotesQueue = new _remotesQueue2.default();
        this.domain = proxy.server1Info.domain;

        this.connectUrl = `${this.domain}/browser/connect`;

        this._registerRoutes(proxy);
    }

    _dispatch(url, proxy, handler, method = 'GET') {
        proxy[method](url, (req, res, si, params) => {
            var connection = this.connections[params.id];

            (0, _http.preventCaching)(res);

            if (connection) handler(req, res, connection);else (0, _http.respond404)(res);
        });
    }

    _registerRoutes(proxy) {
        this._dispatch('/browser/connect/{id}', proxy, BrowserConnectionGateway.onConnection);
        this._dispatch('/browser/heartbeat/{id}', proxy, BrowserConnectionGateway.onHeartbeat);
        this._dispatch('/browser/idle/{id}', proxy, BrowserConnectionGateway.onIdle);
        this._dispatch('/browser/idle-forced/{id}', proxy, BrowserConnectionGateway.onIdleForced);
        this._dispatch('/browser/status/{id}', proxy, BrowserConnectionGateway.onStatusRequest);
        this._dispatch('/browser/status-done/{id}', proxy, BrowserConnectionGateway.onStatusRequestOnTestDone);
        this._dispatch('/browser/init-script/{id}', proxy, BrowserConnectionGateway.onInitScriptRequest);
        this._dispatch('/browser/init-script/{id}', proxy, BrowserConnectionGateway.onInitScriptResponse, 'POST');

        proxy.GET('/browser/connect', (req, res) => this._connectNextRemoteBrowser(req, res));
        proxy.GET('/browser/connect/', (req, res) => this._connectNextRemoteBrowser(req, res));

        proxy.GET('/browser/assets/index.js', { content: IDLE_PAGE_SCRIPT, contentType: 'application/x-javascript' });
        proxy.GET('/browser/assets/styles.css', { content: IDLE_PAGE_STYLE, contentType: 'text/css' });
        proxy.GET('/browser/assets/logo.svg', { content: IDLE_PAGE_LOGO, contentType: 'image/svg+xml' });
    }

    // Helpers
    static ensureConnectionReady(res, connection) {
        if (!connection.ready) {
            (0, _http.respond500)(res, 'The connection is not ready yet.');
            return false;
        }

        return true;
    }

    // Route handlers
    static onConnection(req, res, connection) {
        if (connection.ready) (0, _http.respond500)(res, 'The connection is already established.');else {
            var userAgent = req.headers['user-agent'];

            connection.establish(userAgent);
            (0, _http.redirect)(res, connection.idleUrl);
        }
    }

    static onHeartbeat(req, res, connection) {
        if (BrowserConnectionGateway.ensureConnectionReady(res, connection)) {
            var status = connection.heartbeat();

            (0, _http.respondWithJSON)(res, status);
        }
    }

    static onIdle(req, res, connection) {
        if (BrowserConnectionGateway.ensureConnectionReady(res, connection)) res.end(connection.renderIdlePage());
    }

    static onIdleForced(req, res, connection) {
        return (0, _asyncToGenerator3.default)(function* () {
            if (BrowserConnectionGateway.ensureConnectionReady(res, connection)) {
                const status = yield connection.getStatus(true);

                (0, _http.redirect)(res, status.url);
            }
        })();
    }

    static onStatusRequest(req, res, connection) {
        return (0, _asyncToGenerator3.default)(function* () {
            return BrowserConnectionGateway._onStatusRequestCore(req, res, connection, false);
        })();
    }

    static onStatusRequestOnTestDone(req, res, connection) {
        return (0, _asyncToGenerator3.default)(function* () {
            return BrowserConnectionGateway._onStatusRequestCore(req, res, connection, true);
        })();
    }

    static _onStatusRequestCore(req, res, connection, isTestDone) {
        return (0, _asyncToGenerator3.default)(function* () {
            if (BrowserConnectionGateway.ensureConnectionReady(res, connection)) {
                var status = yield connection.getStatus(isTestDone);

                (0, _http.respondWithJSON)(res, status);
            }
        })();
    }

    static onInitScriptRequest(req, res, connection) {
        if (BrowserConnectionGateway.ensureConnectionReady(res, connection)) {
            var script = connection.getInitScript();

            (0, _http.respondWithJSON)(res, script);
        }
    }

    static onInitScriptResponse(req, res, connection) {
        if (BrowserConnectionGateway.ensureConnectionReady(res, connection)) {
            var data = '';

            req.on('data', chunk => {
                data += chunk;
            });

            req.on('end', () => {
                connection.handleInitScriptResult(data);

                res.end();
            });
        }
    }

    _connectNextRemoteBrowser(req, res) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            (0, _http.preventCaching)(res);

            var remoteConnection = yield _this.remotesQueue.shift();

            if (remoteConnection) (0, _http.redirect)(res, remoteConnection.url);else (0, _http.respond500)(res, 'There are no available connections to establish.');
        })();
    }

    // API
    startServingConnection(connection) {
        this.connections[connection.id] = connection;

        if (connection.browserInfo.providerName === 'remote') this.remotesQueue.add(connection);
    }

    stopServingConnection(connection) {
        delete this.connections[connection.id];

        if (connection.browserInfo.providerName === 'remote') this.remotesQueue.remove(connection);
    }

    close() {
        (0, _keys2.default)(this.connections).forEach(id => this.connections[id].close());
    }
}
exports.default = BrowserConnectionGateway;
module.exports = exports['default'];