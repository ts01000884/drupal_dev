'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let findProcessWin = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (processOptions) {
        var cmd = `wmic process where "commandline like '%${processOptions.arguments}%' and name <> 'cmd.exe' and name <> 'wmic.exe'" get processid`;
        var wmicOutput = yield (0, _promisifiedFunctions.exec)(cmd);
        var processList = wmicOutput.split(/\s*\n/);

        processList = processList
        // NOTE: remove list's header and empty last element, caused by trailing newline
        .slice(1, -1).map(function (pid) {
            return { pid: Number(pid) };
        });

        return processList;
    });

    return function findProcessWin(_x) {
        return _ref.apply(this, arguments);
    };
})();

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _promisifiedFunctions = require('../../../utils/promisified-functions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const BROWSER_CLOSING_TIMEOUT = 5;

exports.default = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* (browserId) {
        var processOptions = { arguments: browserId, psargs: 'aux' };
        var processList = _osFamily2.default.win ? yield findProcessWin(processOptions) : yield (0, _promisifiedFunctions.findProcess)(processOptions);

        if (!processList.length) return true;

        try {
            if (_osFamily2.default.win) process.kill(processList[0].pid);else yield (0, _promisifiedFunctions.killProcess)(processList[0].pid, { timeout: BROWSER_CLOSING_TIMEOUT });

            return true;
        } catch (e) {
            return false;
        }
    });

    return function (_x2) {
        return _ref2.apply(this, arguments);
    };
})();

module.exports = exports['default'];