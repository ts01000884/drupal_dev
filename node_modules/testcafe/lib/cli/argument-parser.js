'use strict';

exports.__esModule = true;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _path = require('path');

var _commander = require('commander');

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _dedent = require('dedent');

var _dedent2 = _interopRequireDefault(_dedent);

var _readFileRelative = require('read-file-relative');

var _runtime = require('../errors/runtime');

var _message = require('../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

var _typeAssertions = require('../errors/runtime/type-assertions');

var _getViewportWidth = require('../utils/get-viewport-width');

var _getViewportWidth2 = _interopRequireDefault(_getViewportWidth);

var _string = require('../utils/string');

var _promisifiedFunctions = require('../utils/promisified-functions');

var _parseSslOptions = require('./parse-ssl-options');

var _parseSslOptions2 = _interopRequireDefault(_parseSslOptions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const REMOTE_ALIAS_RE = /^remote(?::(\d*))?$/;

const DESCRIPTION = (0, _dedent2.default)(`
    In the browser list, you can use browser names (e.g. "ie", "chrome", etc.) as well as paths to executables.

    To run tests against all installed browsers, use the "all" alias.

    To use a remote browser connection (e.g., to connect a mobile device), specify "remote" as the browser alias.
    If you need to connect multiple devices, add a colon and the number of browsers you want to connect (e.g., "remote:3").

    To run tests in a browser accessed through a browser provider plugin, specify a browser alias that consists of two parts - the browser provider name prefix and the name of the browser itself; for example, "saucelabs:chrome@51".

    You can use one or more file paths or glob patterns to specify which tests to run.

    More info: https://devexpress.github.io/testcafe/documentation
`);

class CLIArgumentParser {
    constructor(cwd) {
        this.program = new _commander.Command('testcafe');

        this.cwd = cwd || process.cwd();

        this.src = null;
        this.browsers = null;
        this.filter = null;
        this.remoteCount = 0;
        this.opts = null;

        this._describeProgram();
    }

    static _parsePortNumber(value) {
        (0, _typeAssertions.assertType)(_typeAssertions.is.nonNegativeNumberString, null, 'Port number', value);

        return parseInt(value, 10);
    }

    static _optionValueToRegExp(name, value) {
        if (value === void 0) return value;

        try {
            return new RegExp(value);
        } catch (err) {
            throw new _runtime.GeneralError(_message2.default.optionValueIsNotValidRegExp, name);
        }
    }

    static _getDescription() {
        // NOTE: add empty line to workaround commander-forced indentation on the first line.
        return '\n' + (0, _string.wordWrap)(DESCRIPTION, 2, (0, _getViewportWidth2.default)(process.stdout));
    }

    _describeProgram() {
        var version = JSON.parse((0, _readFileRelative.readSync)('../../package.json')).version;

        this.program.version(version, '-v, --version').usage('[options] <comma-separated-browser-list> <file-or-glob ...>').description(CLIArgumentParser._getDescription()).option('-b, --list-browsers [provider]', 'output the aliases for local browsers or browsers available through the specified browser provider').option('-r, --reporter <name[:outputFile][,...]>', 'specify the reporters and optionally files where reports are saved').option('-s, --screenshots <path>', 'enable screenshot capturing and specify the path to save the screenshots to').option('-S, --screenshots-on-fails', 'take a screenshot whenever a test fails').option('-p, --screenshot-path-pattern <pattern>', 'use patterns to compose screenshot file names and paths: ${BROWSER}, ${BROWSER_VERSION}, ${OS}, etc.').option('-q, --quarantine-mode', 'enable the quarantine mode').option('-d, --debug-mode', 'execute test steps one by one pausing the test after each step').option('-e, --skip-js-errors', 'make tests not fail when a JS error happens on a page').option('-t, --test <name>', 'run only tests with the specified name').option('-T, --test-grep <pattern>', 'run only tests matching the specified pattern').option('-f, --fixture <name>', 'run only fixtures with the specified name').option('-F, --fixture-grep <pattern>', 'run only fixtures matching the specified pattern').option('-a, --app <command>', 'launch the tested app using the specified command before running tests').option('-c, --concurrency <number>', 'run tests concurrently').option('--debug-on-fail', 'pause the test if it fails').option('--app-init-delay <ms>', 'specify how much time it takes for the tested app to initialize').option('--selector-timeout <ms>', 'set the amount of time within which selectors make attempts to obtain a node to be returned').option('--assertion-timeout <ms>', 'set the amount of time within which assertion should pass').option('--page-load-timeout <ms>', 'set the amount of time within which TestCafe waits for the `window.load` event to fire on page load before proceeding to the next test action').option('--speed <factor>', 'set the speed of test execution (0.01 ... 1)').option('--ports <port1,port2>', 'specify custom port numbers').option('--hostname <name>', 'specify the hostname').option('--proxy <host>', 'specify the host of the proxy server').option('--ssl', 'specify SSL options to run TestCafe proxy server over the HTTPS protocol').option('--proxy-bypass <rules>', 'specify a comma-separated list of rules that define URLs accessed bypassing the proxy server').option('--disable-page-reloads', 'disable page reloads between tests').option('--dev', 'enables mechanisms to log and diagnose errors').option('--qr-code', 'outputs QR-code that repeats URLs used to connect the remote browsers')

        // NOTE: these options will be handled by chalk internally
        .option('--color', 'force colors in command line').option('--no-color', 'disable colors in command line');
    }

    _filterAndCountRemotes(browser) {
        var remoteMatch = browser.match(REMOTE_ALIAS_RE);

        if (remoteMatch) {
            this.remoteCount += parseInt(remoteMatch[1], 10) || 1;
            return false;
        }

        return true;
    }

    _parseFilteringOptions() {
        this.opts.testGrep = CLIArgumentParser._optionValueToRegExp('--test-grep', this.opts.testGrep);
        this.opts.fixtureGrep = CLIArgumentParser._optionValueToRegExp('--fixture-grep', this.opts.fixtureGrep);

        this.filter = (testName, fixtureName) => {

            if (this.opts.test && testName !== this.opts.test) return false;

            if (this.opts.testGrep && !this.opts.testGrep.test(testName)) return false;

            if (this.opts.fixture && fixtureName !== this.opts.fixture) return false;

            if (this.opts.fixtureGrep && !this.opts.fixtureGrep.test(fixtureName)) return false;

            return true;
        };
    }

    _parseAppInitDelay() {
        if (this.opts.appInitDelay) {
            (0, _typeAssertions.assertType)(_typeAssertions.is.nonNegativeNumberString, null, 'Tested app initialization delay', this.opts.appInitDelay);

            this.opts.appInitDelay = parseInt(this.opts.appInitDelay, 10);
        }
    }

    _parseSelectorTimeout() {
        if (this.opts.selectorTimeout) {
            (0, _typeAssertions.assertType)(_typeAssertions.is.nonNegativeNumberString, null, 'Selector timeout', this.opts.selectorTimeout);

            this.opts.selectorTimeout = parseInt(this.opts.selectorTimeout, 10);
        }
    }

    _parseAssertionTimeout() {
        if (this.opts.assertionTimeout) {
            (0, _typeAssertions.assertType)(_typeAssertions.is.nonNegativeNumberString, null, 'Assertion timeout', this.opts.assertionTimeout);

            this.opts.assertionTimeout = parseInt(this.opts.assertionTimeout, 10);
        }
    }

    _parsePageLoadTimeout() {
        if (this.opts.pageLoadTimeout) {
            (0, _typeAssertions.assertType)(_typeAssertions.is.nonNegativeNumberString, null, 'Page load timeout', this.opts.pageLoadTimeout);

            this.opts.pageLoadTimeout = parseInt(this.opts.pageLoadTimeout, 10);
        }
    }

    _parseSpeed() {
        if (this.opts.speed) this.opts.speed = parseFloat(this.opts.speed);
    }

    _parseConcurrency() {
        if (this.opts.concurrency) this.concurrency = parseInt(this.opts.concurrency, 10);
    }

    _parsePorts() {
        if (this.opts.ports) {
            this.opts.ports = this.opts.ports.split(',').map(CLIArgumentParser._parsePortNumber);

            if (this.opts.ports.length < 2) throw new _runtime.GeneralError(_message2.default.portsOptionRequiresTwoNumbers);
        }
    }

    _parseBrowserList() {
        var browsersArg = this.program.args[0] || '';

        this.browsers = (0, _string.splitQuotedText)(browsersArg, ',').filter(browser => browser && this._filterAndCountRemotes(browser));
    }

    _parseSslOptions() {
        if (this.opts.ssl) this.opts.ssl = (0, _parseSslOptions2.default)(this.program.args[0]);
    }

    _parseReporters() {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!_this.opts.reporter) {
                _this.opts.reporters = [];
                return;
            }

            const reporters = _this.opts.reporter.split(',');

            _this.opts.reporters = reporters.map(function (reporter) {
                const separatorIndex = reporter.indexOf(':');

                if (separatorIndex < 0) return { name: reporter };

                const name = reporter.substring(0, separatorIndex);
                const outFile = reporter.substring(separatorIndex + 1);

                return { name, outFile };
            });

            for (var _iterator = _this.opts.reporters, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
                var _ref;

                if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref = _iterator[_i++];
                } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref = _i.value;
                }

                const reporter = _ref;

                if (reporter.outFile) {
                    reporter.outFile = (0, _path.resolve)(_this.cwd, reporter.outFile);

                    yield (0, _promisifiedFunctions.ensureDir)((0, _path.dirname)(reporter.outFile));
                }
            }
        })();
    }

    _parseFileList() {
        this.src = this.program.args.slice(1);
    }

    _parseScreenshotsPath() {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this2.opts.screenshots) {
                _this2.opts.screenshots = (0, _path.resolve)(_this2.cwd, _this2.opts.screenshots);

                yield (0, _promisifiedFunctions.ensureDir)(_this2.opts.screenshots);
            }
        })();
    }

    _getProviderName() {
        this.opts.providerName = this.opts.listBrowsers === true ? void 0 : this.opts.listBrowsers;
    }

    parse(argv) {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this3.program.parse(argv);

            _this3.opts = _this3.program.opts();

            // NOTE: the '-list-browsers' option only lists browsers and immediately exits the app.
            // Therefore, we don't need to process other arguments.
            if (_this3.opts.listBrowsers) {
                _this3._getProviderName();
                return;
            }

            _this3._parseFilteringOptions();
            _this3._parseSelectorTimeout();
            _this3._parseAssertionTimeout();
            _this3._parsePageLoadTimeout();
            _this3._parseAppInitDelay();
            _this3._parseSpeed();
            _this3._parsePorts();
            _this3._parseBrowserList();
            _this3._parseConcurrency();
            _this3._parseSslOptions();
            _this3._parseFileList();

            yield _pinkie2.default.all([_this3._parseScreenshotsPath(), _this3._parseReporters()]);
        })();
    }
}
exports.default = CLIArgumentParser;
module.exports = exports['default'];