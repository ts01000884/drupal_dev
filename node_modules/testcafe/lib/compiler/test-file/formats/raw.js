'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _base = require('../base');

var _base2 = _interopRequireDefault(_base);

var _runtime = require('../../../errors/runtime');

var _message = require('../../../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

var _testFile = require('../../../api/structure/test-file');

var _testFile2 = _interopRequireDefault(_testFile);

var _fixture = require('../../../api/structure/fixture');

var _fixture2 = _interopRequireDefault(_fixture);

var _test = require('../../../api/structure/test');

var _test2 = _interopRequireDefault(_test);

var _fromObject = require('../../../test-run/commands/from-object');

var _fromObject2 = _interopRequireDefault(_fromObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class RawTestFileCompiler extends _base2.default {
    static _createTestFn(commands) {
        return (() => {
            var _ref = (0, _asyncToGenerator3.default)(function* (t) {
                for (var i = 0; i < commands.length; i++) {
                    var callsite = commands[i] && commands[i].callsite;
                    var command = null;

                    try {
                        command = (0, _fromObject2.default)(commands[i], t.testRun);

                        yield t.testRun.executeCommand(command, callsite);
                    } catch (err) {
                        err.callsite = callsite;
                        throw err;
                    }
                }
            });

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        })();
    }

    static _assignCommonTestingUnitProperties(src, dest) {
        if (src.pageUrl) dest.page(src.pageUrl);

        if (src.authCredentials) dest.httpAuth(src.authCredentials);

        /* eslint-disable no-unused-expressions */
        if (src.only) dest.only;

        if (src.skip) dest.skip;

        if (src.disablePageReloads) dest.disablePageReloads;

        if (src.enablePageReloads) dest.enablePageReloads;
        /* eslint-enable no-unused-expressions */
    }

    static _addTest(testFile, src) {
        var test = new _test2.default(testFile);

        test(src.name, RawTestFileCompiler._createTestFn(src.commands));

        RawTestFileCompiler._assignCommonTestingUnitProperties(src, test);

        if (src.beforeCommands) test.before(RawTestFileCompiler._createTestFn(src.beforeCommands));

        if (src.afterCommands) test.after(RawTestFileCompiler._createTestFn(src.afterCommands));

        return test;
    }

    static _addFixture(testFile, src) {
        var fixture = new _fixture2.default(testFile);

        fixture(src.name);

        RawTestFileCompiler._assignCommonTestingUnitProperties(src, fixture);

        if (src.beforeEachCommands) fixture.beforeEach(RawTestFileCompiler._createTestFn(src.beforeEachCommands));

        if (src.afterEachCommands) fixture.afterEach(RawTestFileCompiler._createTestFn(src.afterEachCommands));

        src.tests.forEach(testSrc => RawTestFileCompiler._addTest(testFile, testSrc));
    }

    _hasTests() {
        return true;
    }

    getSupportedExtension() {
        return '.testcafe';
    }

    compile(code, filename) {
        var data = null;
        var testFile = new _testFile2.default(filename);

        try {
            data = JSON.parse(code);

            data.fixtures.forEach(fixtureSrc => RawTestFileCompiler._addFixture(testFile, fixtureSrc));

            return testFile.getTests();
        } catch (err) {
            throw new _runtime.GeneralError(_message2.default.cannotParseRawFile, filename, err.toString());
        }
    }
}
exports.default = RawTestFileCompiler;
module.exports = exports['default'];