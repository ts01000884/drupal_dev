'use strict';

exports.__esModule = true;
exports.DebugCommand = exports.ExecuteSelectorCommand = exports.ExecuteClientFunctionCommand = exports.WaitCommand = undefined;

var _type = require('./type');

var _type2 = _interopRequireDefault(_type);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _argument = require('./validations/argument');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Commands
class WaitCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.wait);
    }

    _getAssignableProperties() {
        return [{ name: 'timeout', type: _argument.positiveIntegerArgument, required: true }];
    }
}

exports.WaitCommand = WaitCommand;
class ExecuteClientFunctionCommandBase extends _base2.default {
    constructor(obj, testRun, type) {
        super(obj, testRun, type, false);
    }

    _getAssignableProperties() {
        return [{ name: 'instantiationCallsiteName', defaultValue: '' }, { name: 'fnCode', defaultValue: '' }, { name: 'args', defaultValue: [] }, { name: 'dependencies', defaultValue: [] }];
    }
}

class ExecuteClientFunctionCommand extends ExecuteClientFunctionCommandBase {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.executeClientFunction);
    }
}

exports.ExecuteClientFunctionCommand = ExecuteClientFunctionCommand;
class ExecuteSelectorCommand extends ExecuteClientFunctionCommandBase {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.executeSelector);
    }

    _getAssignableProperties() {
        return super._getAssignableProperties().concat([{ name: 'visibilityCheck', defaultValue: false }, { name: 'timeout', defaultValue: null }, { name: 'index', defaultValue: 0 }]);
    }
}

exports.ExecuteSelectorCommand = ExecuteSelectorCommand;
class DebugCommand {
    constructor() {
        this.type = _type2.default.debug;
    }
}
exports.DebugCommand = DebugCommand;