'use strict';

exports.__esModule = true;

var _lodash = require('lodash');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _capturer = require('./capturer');

var _capturer2 = _interopRequireDefault(_capturer);

var _pathPattern = require('./path-pattern');

var _pathPattern2 = _interopRequireDefault(_pathPattern);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Screenshots {
    constructor(path, pattern) {
        this.enabled = !!path;
        this.screenshotsPath = path;
        this.screenshotsPattern = pattern;
        this.testEntries = [];
        this.now = (0, _moment2.default)();
    }

    _addTestEntry(test) {
        const testEntry = {
            test: test,
            path: this.screenshotsPath || '',
            screenshots: []
        };

        this.testEntries.push(testEntry);

        return testEntry;
    }

    _getTestEntry(test) {
        return (0, _lodash.find)(this.testEntries, entry => entry.test === test);
    }

    _ensureTestEntry(test) {
        let testEntry = this._getTestEntry(test);

        if (!testEntry) testEntry = this._addTestEntry(test);

        return testEntry;
    }

    getScreenshotsInfo(test) {
        return this._getTestEntry(test).screenshots;
    }

    hasCapturedFor(test) {
        return this.getScreenshotsInfo(test).length > 0;
    }

    getPathFor(test) {
        return this._getTestEntry(test).path;
    }

    createCapturerFor(test, testIndex, quarantine, connection, warningLog) {
        const testEntry = this._ensureTestEntry(test);
        const pathPattern = new _pathPattern2.default(this.screenshotsPattern, {
            testIndex,
            quarantineAttempt: quarantine ? quarantine.getNextAttemptNumber() : null,
            now: this.now,
            fixture: test.fixture.name,
            test: test.name,
            parsedUserAgent: connection.browserInfo.parsedUserAgent
        });

        return new _capturer2.default(this.screenshotsPath, testEntry, connection, pathPattern, warningLog);
    }
}
exports.default = Screenshots;
module.exports = exports['default'];