'use strict';

exports.__esModule = true;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _testcafeBrowserTools = require('testcafe-browser-tools');

var _testcafeBrowserTools2 = _interopRequireDefault(_testcafeBrowserTools);

var _string = require('../../../utils/string');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    isMultiBrowser: true,

    _handleString(str) {
        return (0, _asyncToGenerator3.default)(function* () {
            var args = (0, _string.splitQuotedText)(str, ' ', '`"\'');
            var path = args.shift();

            var browserInfo = yield _testcafeBrowserTools2.default.getBrowserInfo(path);

            if (!browserInfo) return null;

            var params = (0, _assign2.default)({}, browserInfo);

            if (args.length) params.cmd = args.join(' ') + (params.cmd ? ' ' + params.cmd : '');

            return params;
        })();
    },

    _handleJSON(str) {
        return (0, _asyncToGenerator3.default)(function* () {
            var params = null;

            try {
                params = JSON.parse(str);
            } catch (e) {
                return null;
            }

            if (!params.path) return null;

            var openParameters = yield _testcafeBrowserTools2.default.getBrowserInfo(params.path);

            if (!openParameters) return null;

            if (params.cmd) openParameters.cmd = params.cmd;

            return openParameters;
        })();
    },

    openBrowser(browserId, pageUrl, browserName) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var openParameters = (yield _this._handleString(browserName)) || (yield _this._handleJSON(browserName));

            if (!openParameters) throw new Error('The specified browser name is not valid!');

            yield _testcafeBrowserTools2.default.open(openParameters, pageUrl);
        })();
    },

    isLocalBrowser() {
        return (0, _asyncToGenerator3.default)(function* () {
            return true;
        })();
    }
};
module.exports = exports['default'];