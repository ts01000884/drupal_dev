'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _runtimeInfo = require('./runtime-info');

var _runtimeInfo2 = _interopRequireDefault(_runtimeInfo);

var _localFirefox = require('./local-firefox');

var _marionetteClient = require('./marionette-client');

var _marionetteClient2 = _interopRequireDefault(_marionetteClient);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _getMaximizedHeadlessWindowSize = require('../../utils/get-maximized-headless-window-size');

var _getMaximizedHeadlessWindowSize2 = _interopRequireDefault(_getMaximizedHeadlessWindowSize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    openedBrowsers: {},

    isMultiBrowser: false,

    _createMarionetteClient(runtimeInfo) {
        return (0, _asyncToGenerator3.default)(function* () {
            try {
                const marionetteClient = new _marionetteClient2.default(runtimeInfo.marionettePort);

                yield marionetteClient.connect();

                return marionetteClient;
            } catch (e) {
                return null;
            }
        })();
    },

    openBrowser(browserId, pageUrl, configString) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var runtimeInfo = yield (0, _runtimeInfo2.default)(configString);
            var browserName = _this.providerName.replace(':', '');

            runtimeInfo.browserId = browserId;
            runtimeInfo.browserName = browserName;

            yield (0, _localFirefox.start)(pageUrl, runtimeInfo);

            yield _this.waitForConnectionReady(runtimeInfo.browserId);

            if (runtimeInfo.marionettePort) runtimeInfo.marionetteClient = yield _this._createMarionetteClient(runtimeInfo);

            _this.openedBrowsers[browserId] = runtimeInfo;
        })();
    },

    closeBrowser(browserId) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var runtimeInfo = _this2.openedBrowsers[browserId];
            var config = runtimeInfo.config,
                marionetteClient = runtimeInfo.marionetteClient;


            if (config.headless) yield marionetteClient.quit();else yield _this2.closeLocalBrowser(browserId);

            if (_osFamily2.default.mac && !config.headless) yield (0, _localFirefox.stop)(runtimeInfo);

            delete _this2.openedBrowsers[browserId];
        })();
    },

    isLocalBrowser(browserId, configString) {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var config = _this3.openedBrowsers[browserId] ? _this3.openedBrowsers[browserId].config : (0, _config2.default)(configString);

            return !config.headless;
        })();
    },

    takeScreenshot(browserId, path) {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var marionetteClient = _this4.openedBrowsers[browserId].marionetteClient;


            yield marionetteClient.takeScreenshot(path);
        })();
    },

    resizeWindow(browserId, width, height) {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var marionetteClient = _this5.openedBrowsers[browserId].marionetteClient;


            yield marionetteClient.setWindowSize(width, height);
        })();
    },

    maximizeWindow(browserId) {
        var _this6 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const maximumSize = (0, _getMaximizedHeadlessWindowSize2.default)();

            yield _this6.resizeWindow(browserId, maximumSize.width, maximumSize.height);
        })();
    },

    hasCustomActionForBrowser(browserId) {
        var _this7 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var _openedBrowsers$brows = _this7.openedBrowsers[browserId],
                config = _openedBrowsers$brows.config,
                marionetteClient = _openedBrowsers$brows.marionetteClient;


            return {
                hasCloseBrowser: true,
                hasTakeScreenshot: !!marionetteClient,
                hasChromelessScreenshots: !!marionetteClient,
                hasResizeWindow: !!marionetteClient && config.headless,
                hasMaximizeWindow: !!marionetteClient && config.headless,
                hasCanResizeWindowToDimensions: false
            };
        })();
    }
};
module.exports = exports['default'];