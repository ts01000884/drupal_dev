'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _lodash = require('lodash');

var _stripBom = require('strip-bom');

var _stripBom2 = _interopRequireDefault(_stripBom);

var _sourceMapSupport = require('source-map-support');

var _sourceMapSupport2 = _interopRequireDefault(_sourceMapSupport);

var _testcafeLegacyApi = require('testcafe-legacy-api');

var _testcafeHammerhead = require('testcafe-hammerhead');

var _testcafeHammerhead2 = _interopRequireDefault(_testcafeHammerhead);

var _compiler = require('./test-file/formats/es-next/compiler');

var _compiler2 = _interopRequireDefault(_compiler);

var _compiler3 = require('./test-file/formats/typescript/compiler');

var _compiler4 = _interopRequireDefault(_compiler3);

var _raw = require('./test-file/formats/raw');

var _raw2 = _interopRequireDefault(_raw);

var _promisifiedFunctions = require('../utils/promisified-functions');

var _runtime = require('../errors/runtime');

var _message = require('../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SOURCE_CHUNK_LENGTH = 1000;

var testFileCompilers = [new _testcafeLegacyApi.Compiler(_testcafeHammerhead2.default.processScript), new _compiler2.default(), new _compiler4.default(), new _raw2.default()];

class Compiler {
    constructor(sources) {
        this.sources = sources;

        Compiler._setupSourceMapsSupport();
    }

    static getSupportedTestFileExtensions() {
        return (0, _lodash.uniq)(testFileCompilers.map(c => c.getSupportedExtension()));
    }

    static _setupSourceMapsSupport() {
        _sourceMapSupport2.default.install({
            hookRequire: true,
            handleUncaughtExceptions: false,
            environment: 'node'
        });
    }

    _compileTestFile(filename) {
        return (0, _asyncToGenerator3.default)(function* () {
            var code = null;

            try {
                code = yield (0, _promisifiedFunctions.readFile)(filename);
            } catch (err) {
                throw new _runtime.GeneralError(_message2.default.cantFindSpecifiedTestSource, filename);
            }

            code = (0, _stripBom2.default)(code).toString();

            var compiler = (0, _lodash.find)(testFileCompilers, function (c) {
                return c.canCompile(code, filename);
            });

            return compiler ? yield compiler.compile(code, filename) : null;
        })();
    }

    getTests() {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var sourceChunks = (0, _lodash.chunk)(_this.sources, SOURCE_CHUNK_LENGTH);
            var tests = [];
            var compileUnits = [];

            // NOTE: split sources into chunks because the fs module can't read all files
            // simultaneously if the number of them is too large (several thousands).
            while (sourceChunks.length) {
                compileUnits = sourceChunks.shift().map(function (filename) {
                    return _this._compileTestFile(filename);
                });
                tests = tests.concat((yield _pinkie2.default.all(compileUnits)));
            }

            testFileCompilers.forEach(function (c) {
                return c.cleanUp();
            });

            tests = (0, _lodash.flattenDeep)(tests).filter(function (test) {
                return !!test;
            });

            return tests;
        })();
    }
}
exports.default = Compiler;
module.exports = exports['default'];