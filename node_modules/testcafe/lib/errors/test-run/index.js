'use strict';

exports.__esModule = true;
exports.SetNativeDialogHandlerCodeWrongTypeError = exports.UncaughtErrorInNativeDialogHandler = exports.NativeDialogNotHandledError = exports.CurrentIframeIsInvisibleError = exports.CurrentIframeNotFoundError = exports.CurrentIframeIsNotLoadedError = exports.ActionIframeIsNotLoadedError = exports.ActionElementNotIframeError = exports.RoleSwitchInRoleInitializerError = exports.InvalidElementScreenshotDimensionsError = exports.WindowDimensionsOverflowError = exports.ActionInvalidScrollTargetError = exports.ActionElementIsNotFileInputError = exports.ActionCanNotFindFileToUploadError = exports.ActionIncorrectKeysError = exports.ActionRootContainerNotFoundError = exports.ActionElementNonContentEditableError = exports.ActionElementNotTextAreaError = exports.ActionElementNonEditableError = exports.ActionAdditionalSelectorMatchesWrongNodeTypeError = exports.ActionAdditionalElementIsInvisibleError = exports.ActionAdditionalElementNotFoundError = exports.ActionSelectorMatchesWrongNodeTypeError = exports.ActionElementIsInvisibleError = exports.ActionElementNotFoundError = exports.ActionSelectorError = exports.ActionUnsupportedDeviceTypeError = exports.SetTestSpeedArgumentError = exports.ActionStringArrayElementError = exports.ActionStringOrStringArrayArgumentError = exports.ActionPositiveIntegerArgumentError = exports.ActionRoleArgumentError = exports.ActionIntegerArgumentError = exports.ActionNullableStringArgumentError = exports.ActionStringArgumentError = exports.ActionOptionsTypeError = exports.ActionSpeedOptionError = exports.ActionBooleanArgumentError = exports.ActionBooleanOptionError = exports.ActionPositiveIntegerOptionError = exports.ActionIntegerOptionError = exports.AssertionUnawaitedPromiseError = exports.AssertionExecutableArgumentError = exports.ExternalAssertionLibraryError = exports.UncaughtErrorInCustomDOMPropertyCode = exports.UncaughtErrorInClientFunctionCode = exports.UncaughtNonErrorObjectInTestCode = exports.UncaughtErrorInTestCode = exports.UncaughtErrorOnPage = exports.PageLoadError = exports.CantObtainInfoForElementSpecifiedBySelectorError = exports.InvalidSelectorResultError = exports.DomNodeClientFunctionResultError = exports.ClientFunctionExecutionInterruptionError = exports.MissingAwaitError = undefined;

var _type = require('./type');

var _type2 = _interopRequireDefault(_type);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Base
//--------------------------------------------------------------------
class TestRunErrorBase {
    constructor(type) {
        this.type = type;
        this.isTestCafeError = true;
        this.callsite = null;
    }
} // -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------


class ActionOptionErrorBase extends TestRunErrorBase {
    constructor(type, optionName, actualValue) {
        super(type);

        this.optionName = optionName;
        this.actualValue = actualValue;
    }
}

class ActionArgumentErrorBase extends TestRunErrorBase {
    constructor(type, argumentName, actualValue) {
        super(type);

        this.argumentName = argumentName;
        this.actualValue = actualValue;
    }
}

// Synchronization errors
//--------------------------------------------------------------------
class MissingAwaitError extends TestRunErrorBase {
    constructor(callsite) {
        super(_type2.default.missingAwaitError);

        this.callsite = callsite;
    }
}

exports.MissingAwaitError = MissingAwaitError; // Client function errors
//--------------------------------------------------------------------

class ClientFunctionExecutionInterruptionError extends TestRunErrorBase {
    constructor(instantiationCallsiteName) {
        super(_type2.default.clientFunctionExecutionInterruptionError);

        this.instantiationCallsiteName = instantiationCallsiteName;
    }
}

exports.ClientFunctionExecutionInterruptionError = ClientFunctionExecutionInterruptionError;
class DomNodeClientFunctionResultError extends TestRunErrorBase {
    constructor(instantiationCallsiteName) {
        super(_type2.default.domNodeClientFunctionResultError);

        this.instantiationCallsiteName = instantiationCallsiteName;
    }
}

exports.DomNodeClientFunctionResultError = DomNodeClientFunctionResultError; // Selector errors
//--------------------------------------------------------------------

class InvalidSelectorResultError extends TestRunErrorBase {
    constructor() {
        super(_type2.default.invalidSelectorResultError);
    }
}

exports.InvalidSelectorResultError = InvalidSelectorResultError;
class CantObtainInfoForElementSpecifiedBySelectorError extends TestRunErrorBase {
    constructor(callsite) {
        super(_type2.default.cantObtainInfoForElementSpecifiedBySelectorError);

        this.callsite = callsite;
    }
}

exports.CantObtainInfoForElementSpecifiedBySelectorError = CantObtainInfoForElementSpecifiedBySelectorError; // Page errors
//--------------------------------------------------------------------

class PageLoadError extends TestRunErrorBase {
    constructor(errMsg) {
        super(_type2.default.pageLoadError);

        this.errMsg = errMsg;
    }
}

exports.PageLoadError = PageLoadError; // Uncaught errors
//--------------------------------------------------------------------

class UncaughtErrorOnPage extends TestRunErrorBase {
    constructor(errMsg, pageDestUrl) {
        super(_type2.default.uncaughtErrorOnPage);

        this.errMsg = errMsg;
        this.pageDestUrl = pageDestUrl;
    }
}

exports.UncaughtErrorOnPage = UncaughtErrorOnPage;
class UncaughtErrorInTestCode extends TestRunErrorBase {
    constructor(err, callsite) {
        super(_type2.default.uncaughtErrorInTestCode);

        this.errMsg = String(err);
        this.callsite = callsite;
    }
}

exports.UncaughtErrorInTestCode = UncaughtErrorInTestCode;
class UncaughtNonErrorObjectInTestCode extends TestRunErrorBase {
    constructor(obj) {
        super(_type2.default.uncaughtNonErrorObjectInTestCode);

        this.objType = typeof obj;
        this.objStr = String(obj);
    }
}

exports.UncaughtNonErrorObjectInTestCode = UncaughtNonErrorObjectInTestCode;
class UncaughtErrorInClientFunctionCode extends TestRunErrorBase {
    constructor(instantiationCallsiteName, err) {
        super(_type2.default.uncaughtErrorInClientFunctionCode);

        this.errMsg = String(err);
        this.instantiationCallsiteName = instantiationCallsiteName;
    }
}

exports.UncaughtErrorInClientFunctionCode = UncaughtErrorInClientFunctionCode;
class UncaughtErrorInCustomDOMPropertyCode extends TestRunErrorBase {
    constructor(instantiationCallsiteName, err, prop) {
        super(_type2.default.uncaughtErrorInCustomDOMPropertyCode, err, prop);

        this.errMsg = String(err);
        this.property = prop;
        this.instantiationCallsiteName = instantiationCallsiteName;
    }
}

exports.UncaughtErrorInCustomDOMPropertyCode = UncaughtErrorInCustomDOMPropertyCode; // Assertion errors
//--------------------------------------------------------------------

class ExternalAssertionLibraryError extends TestRunErrorBase {
    constructor(err, callsite) {
        super(_type2.default.externalAssertionLibraryError);

        this.errMsg = String(err);
        this.callsite = callsite;
    }
}

exports.ExternalAssertionLibraryError = ExternalAssertionLibraryError;
class AssertionExecutableArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, argumentValue, errMsg) {
        super(_type2.default.assertionExecutableArgumentError, argumentName, argumentValue);

        this.errMsg = errMsg;
    }
}

exports.AssertionExecutableArgumentError = AssertionExecutableArgumentError;
class AssertionUnawaitedPromiseError extends TestRunErrorBase {
    constructor(callsite) {
        super(_type2.default.assertionUnawaitedPromiseError);

        this.callsite = callsite;
    }
}

exports.AssertionUnawaitedPromiseError = AssertionUnawaitedPromiseError; // Action parameters errors
//--------------------------------------------------------------------
// Options errors

class ActionIntegerOptionError extends ActionOptionErrorBase {
    constructor(optionName, actualValue) {
        super(_type2.default.actionIntegerOptionError, optionName, actualValue);
    }
}

exports.ActionIntegerOptionError = ActionIntegerOptionError;
class ActionPositiveIntegerOptionError extends ActionOptionErrorBase {
    constructor(optionName, actualValue) {
        super(_type2.default.actionPositiveIntegerOptionError, optionName, actualValue);
    }
}

exports.ActionPositiveIntegerOptionError = ActionPositiveIntegerOptionError;
class ActionBooleanOptionError extends ActionOptionErrorBase {
    constructor(optionName, actualValue) {
        super(_type2.default.actionBooleanOptionError, optionName, actualValue);
    }
}

exports.ActionBooleanOptionError = ActionBooleanOptionError;
class ActionBooleanArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(_type2.default.actionBooleanArgumentError, argumentName, actualValue);
    }
}

exports.ActionBooleanArgumentError = ActionBooleanArgumentError;
class ActionSpeedOptionError extends ActionOptionErrorBase {
    constructor(optionName, actualValue) {
        super(_type2.default.actionSpeedOptionError, optionName, actualValue);
    }
}

exports.ActionSpeedOptionError = ActionSpeedOptionError;
class ActionOptionsTypeError extends TestRunErrorBase {
    constructor(actualType) {
        super(_type2.default.actionOptionsTypeError);

        this.actualType = actualType;
    }
}

exports.ActionOptionsTypeError = ActionOptionsTypeError; // Arguments errors

class ActionStringArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(_type2.default.actionStringArgumentError, argumentName, actualValue);
    }
}

exports.ActionStringArgumentError = ActionStringArgumentError;
class ActionNullableStringArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(_type2.default.actionNullableStringArgumentError, argumentName, actualValue);
    }
}

exports.ActionNullableStringArgumentError = ActionNullableStringArgumentError;
class ActionIntegerArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(_type2.default.actionIntegerArgumentError, argumentName, actualValue);
    }
}

exports.ActionIntegerArgumentError = ActionIntegerArgumentError;
class ActionRoleArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(_type2.default.actionRoleArgumentError, argumentName, actualValue);
    }
}

exports.ActionRoleArgumentError = ActionRoleArgumentError;
class ActionPositiveIntegerArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(_type2.default.actionPositiveIntegerArgumentError, argumentName, actualValue);
    }
}

exports.ActionPositiveIntegerArgumentError = ActionPositiveIntegerArgumentError;
class ActionStringOrStringArrayArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(_type2.default.actionStringOrStringArrayArgumentError, argumentName, actualValue);
    }
}

exports.ActionStringOrStringArrayArgumentError = ActionStringOrStringArrayArgumentError;
class ActionStringArrayElementError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue, elementIndex) {
        super(_type2.default.actionStringArrayElementError, argumentName, actualValue);

        this.elementIndex = elementIndex;
    }
}

exports.ActionStringArrayElementError = ActionStringArrayElementError;
class SetTestSpeedArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(_type2.default.setTestSpeedArgumentError, argumentName, actualValue);
    }
}

exports.SetTestSpeedArgumentError = SetTestSpeedArgumentError;
class ActionUnsupportedDeviceTypeError extends ActionArgumentErrorBase {
    constructor(argumentName, argumentValue) {
        super(_type2.default.actionUnsupportedDeviceTypeError, argumentName, argumentValue);
    }
}

exports.ActionUnsupportedDeviceTypeError = ActionUnsupportedDeviceTypeError; // Selector errors

class ActionSelectorError extends TestRunErrorBase {
    constructor(selectorName, errMsg) {
        super(_type2.default.actionSelectorError);

        this.selectorName = selectorName;
        this.errMsg = errMsg;
    }
}

exports.ActionSelectorError = ActionSelectorError; // Action execution errors
//--------------------------------------------------------------------

class ActionElementNotFoundError extends TestRunErrorBase {
    constructor() {
        super(_type2.default.actionElementNotFoundError);
    }
}

exports.ActionElementNotFoundError = ActionElementNotFoundError;
class ActionElementIsInvisibleError extends TestRunErrorBase {
    constructor() {
        super(_type2.default.actionElementIsInvisibleError);
    }
}

exports.ActionElementIsInvisibleError = ActionElementIsInvisibleError;
class ActionSelectorMatchesWrongNodeTypeError extends TestRunErrorBase {
    constructor(nodeDescription) {
        super(_type2.default.actionSelectorMatchesWrongNodeTypeError);

        this.nodeDescription = nodeDescription;
    }
}

exports.ActionSelectorMatchesWrongNodeTypeError = ActionSelectorMatchesWrongNodeTypeError;
class ActionAdditionalElementNotFoundError extends TestRunErrorBase {
    constructor(argumentName) {
        super(_type2.default.actionAdditionalElementNotFoundError);

        this.argumentName = argumentName;
    }
}

exports.ActionAdditionalElementNotFoundError = ActionAdditionalElementNotFoundError;
class ActionAdditionalElementIsInvisibleError extends TestRunErrorBase {
    constructor(argumentName) {
        super(_type2.default.actionAdditionalElementIsInvisibleError);

        this.argumentName = argumentName;
    }
}

exports.ActionAdditionalElementIsInvisibleError = ActionAdditionalElementIsInvisibleError;
class ActionAdditionalSelectorMatchesWrongNodeTypeError extends TestRunErrorBase {
    constructor(argumentName, nodeDescription) {
        super(_type2.default.actionAdditionalSelectorMatchesWrongNodeTypeError);

        this.argumentName = argumentName;
        this.nodeDescription = nodeDescription;
    }
}

exports.ActionAdditionalSelectorMatchesWrongNodeTypeError = ActionAdditionalSelectorMatchesWrongNodeTypeError;
class ActionElementNonEditableError extends TestRunErrorBase {
    constructor() {
        super(_type2.default.actionElementNonEditableError);
    }
}

exports.ActionElementNonEditableError = ActionElementNonEditableError;
class ActionElementNotTextAreaError extends TestRunErrorBase {
    constructor() {
        super(_type2.default.actionElementNotTextAreaError);
    }
}

exports.ActionElementNotTextAreaError = ActionElementNotTextAreaError;
class ActionElementNonContentEditableError extends TestRunErrorBase {
    constructor(argumentName) {
        super(_type2.default.actionElementNonContentEditableError);

        this.argumentName = argumentName;
    }
}

exports.ActionElementNonContentEditableError = ActionElementNonContentEditableError;
class ActionRootContainerNotFoundError extends TestRunErrorBase {
    constructor() {
        super(_type2.default.actionRootContainerNotFoundError);
    }
}

exports.ActionRootContainerNotFoundError = ActionRootContainerNotFoundError;
class ActionIncorrectKeysError extends TestRunErrorBase {
    constructor(argumentName) {
        super(_type2.default.actionIncorrectKeysError);

        this.argumentName = argumentName;
    }
}

exports.ActionIncorrectKeysError = ActionIncorrectKeysError;
class ActionCanNotFindFileToUploadError extends TestRunErrorBase {
    constructor(filePaths) {
        super(_type2.default.actionCanNotFindFileToUploadError);

        this.filePaths = filePaths;
    }
}

exports.ActionCanNotFindFileToUploadError = ActionCanNotFindFileToUploadError;
class ActionElementIsNotFileInputError extends TestRunErrorBase {
    constructor() {
        super(_type2.default.actionElementIsNotFileInputError);
    }
}

exports.ActionElementIsNotFileInputError = ActionElementIsNotFileInputError;
class ActionInvalidScrollTargetError extends TestRunErrorBase {
    constructor(scrollTargetXValid, scrollTargetYValid) {
        super(_type2.default.actionInvalidScrollTargetError);

        if (!scrollTargetXValid) {
            if (!scrollTargetYValid) this.properties = 'scrollTargetX and scrollTargetY properties';else this.properties = 'scrollTargetX property';
        } else this.properties = 'scrollTargetY property';
    }
}

exports.ActionInvalidScrollTargetError = ActionInvalidScrollTargetError;
class WindowDimensionsOverflowError extends TestRunErrorBase {
    constructor(callsite) {
        super(_type2.default.windowDimensionsOverflowError);

        this.callsite = callsite;
    }
}

exports.WindowDimensionsOverflowError = WindowDimensionsOverflowError;
class InvalidElementScreenshotDimensionsError extends TestRunErrorBase {
    constructor(width, height) {
        super(_type2.default.invalidElementScreenshotDimensionsError);

        var widthIsInvalid = width <= 0;
        var heightIsInvalid = height <= 0;

        if (widthIsInvalid) {
            if (heightIsInvalid) {
                this.verb = 'are';
                this.dimensions = 'width and height';
            } else {
                this.verb = 'is';
                this.dimensions = 'width';
            }
        } else {
            this.verb = 'is';
            this.dimensions = 'height';
        }
    }
}

exports.InvalidElementScreenshotDimensionsError = InvalidElementScreenshotDimensionsError;
class RoleSwitchInRoleInitializerError extends TestRunErrorBase {
    constructor(callsite) {
        super(_type2.default.roleSwitchInRoleInitializerError);

        this.callsite = callsite;
    }
}

exports.RoleSwitchInRoleInitializerError = RoleSwitchInRoleInitializerError; // Iframe errors

class ActionElementNotIframeError extends TestRunErrorBase {
    constructor() {
        super(_type2.default.actionElementNotIframeError);
    }
}

exports.ActionElementNotIframeError = ActionElementNotIframeError;
class ActionIframeIsNotLoadedError extends TestRunErrorBase {
    constructor() {
        super(_type2.default.actionIframeIsNotLoadedError);
    }
}

exports.ActionIframeIsNotLoadedError = ActionIframeIsNotLoadedError;
class CurrentIframeIsNotLoadedError extends TestRunErrorBase {
    constructor() {
        super(_type2.default.currentIframeIsNotLoadedError);
    }
}

exports.CurrentIframeIsNotLoadedError = CurrentIframeIsNotLoadedError;
class CurrentIframeNotFoundError extends TestRunErrorBase {
    constructor() {
        super(_type2.default.currentIframeNotFoundError);
    }
}

exports.CurrentIframeNotFoundError = CurrentIframeNotFoundError;
class CurrentIframeIsInvisibleError extends TestRunErrorBase {
    constructor() {
        super(_type2.default.currentIframeIsInvisibleError);
    }
}

exports.CurrentIframeIsInvisibleError = CurrentIframeIsInvisibleError; // Native dialog errors

class NativeDialogNotHandledError extends TestRunErrorBase {
    constructor(dialogType, url) {
        super(_type2.default.nativeDialogNotHandledError);

        this.dialogType = dialogType;
        this.pageUrl = url;
    }
}

exports.NativeDialogNotHandledError = NativeDialogNotHandledError;
class UncaughtErrorInNativeDialogHandler extends TestRunErrorBase {
    constructor(dialogType, errMsg, url) {
        super(_type2.default.uncaughtErrorInNativeDialogHandler);

        this.dialogType = dialogType;
        this.errMsg = errMsg;
        this.pageUrl = url;
    }
}

exports.UncaughtErrorInNativeDialogHandler = UncaughtErrorInNativeDialogHandler;
class SetNativeDialogHandlerCodeWrongTypeError extends TestRunErrorBase {
    constructor(actualType) {
        super(_type2.default.setNativeDialogHandlerCodeWrongTypeError);

        this.actualType = actualType;
    }
}
exports.SetNativeDialogHandlerCodeWrongTypeError = SetNativeDialogHandlerCodeWrongTypeError;