'use strict';

exports.__esModule = true;

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

exports.default = createRequestMock;

var _hook = require('./hook');

var _hook2 = _interopRequireDefault(_hook);

var _testcafeHammerhead = require('testcafe-hammerhead');

var _runtime = require('../../errors/runtime');

var _message = require('../../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

var _warningMessage = require('../../notifications/warning-message');

var _warningMessage2 = _interopRequireDefault(_warningMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class RequestMock extends _hook2.default {
    constructor() {
        super([]);

        this.pendingRequestFilterRuleInit = null;
        this.mocks = new _map2.default();
    }

    onRequest(event) {
        const mock = this.mocks.get(event._requestFilterRule);

        event.setMock(mock);
    }

    onResponse(event) {
        if (event.statusCode === _testcafeHammerhead.SAME_ORIGIN_CHECK_FAILED_STATUS_CODE) this.warningLog.addWarning(_warningMessage2.default.requestMockCORSValidationFailed, RequestMock.name, event._requestFilterRule);
    }

    // API
    onRequestTo(requestFilterRuleInit) {
        if (this.pendingRequestFilterRuleInit) throw new _runtime.APIError('onRequestTo', _message2.default.requestHookConfigureAPIError, RequestMock.name, "The 'respond' method was not called after 'onRequestTo'. You must call the 'respond' method to provide the mocked response.");

        this.pendingRequestFilterRuleInit = requestFilterRuleInit;

        return this;
    }

    respond(body, statusCode, headers) {
        if (!this.pendingRequestFilterRuleInit) throw new _runtime.APIError('respond', _message2.default.requestHookConfigureAPIError, RequestMock.name, "The 'onRequestTo' method was not called before 'respond'. You must call the 'onRequestTo' method to provide the URL requests to which are mocked.");

        const mock = new _testcafeHammerhead.ResponseMock(body, statusCode, headers);
        const rule = new _testcafeHammerhead.RequestFilterRule(this.pendingRequestFilterRuleInit);

        this.requestFilterRules.push(rule);
        this.mocks.set(rule, mock);
        this.pendingRequestFilterRuleInit = null;

        return this;
    }
}

function createRequestMock() {
    return new RequestMock();
}
module.exports = exports['default'];