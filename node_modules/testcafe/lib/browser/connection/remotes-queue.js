'use strict';

exports.__esModule = true;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _events = require('events');

var _promisifyEvent = require('promisify-event');

var _promisifyEvent2 = _interopRequireDefault(_promisifyEvent);

var _timeLimitPromise = require('time-limit-promise');

var _timeLimitPromise2 = _interopRequireDefault(_timeLimitPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const REMOTE_REDIRECT_TIMEOUT = 10000;
const ADDING_CONNECTION_WAITING_TIMEOUT = 10000;

class RemotesQueue {
    constructor() {
        this.events = new _events.EventEmitter();
        this.shiftingTimeout = _pinkie2.default.resolve();
        this.pendingConnections = {};
    }

    add(remoteConnection) {
        var connectionReadyPromise = (0, _promisifyEvent2.default)(remoteConnection, 'ready').then(() => this.remove(remoteConnection));

        this.pendingConnections[remoteConnection.id] = {
            connection: remoteConnection,
            readyPromise: connectionReadyPromise
        };

        this.events.emit('connection-added', remoteConnection.id);
    }

    remove(remoteConnection) {
        delete this.pendingConnections[remoteConnection.id];
    }

    shift() {
        var _this = this;

        var shiftingPromise = this.shiftingTimeout.then((0, _asyncToGenerator3.default)(function* () {
            var headId = (0, _keys2.default)(_this.pendingConnections)[0];

            if (!headId) headId = yield (0, _timeLimitPromise2.default)((0, _promisifyEvent2.default)(_this.events, 'connection-added'), ADDING_CONNECTION_WAITING_TIMEOUT);

            return headId ? _this.pendingConnections[headId].connection : null;
        }));

        this.shiftingTimeout = shiftingPromise.then(connection => {
            if (!connection) return _pinkie2.default.resolve();

            return (0, _timeLimitPromise2.default)(this.pendingConnections[connection.id].readyPromise, REMOTE_REDIRECT_TIMEOUT);
        });

        return shiftingPromise;
    }
}
exports.default = RemotesQueue;
module.exports = exports['default'];