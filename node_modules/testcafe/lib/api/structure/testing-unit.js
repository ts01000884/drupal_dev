'use strict';

exports.__esModule = true;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _testPageUrl = require('../test-page-url');

var _handleTagArgs = require('../../utils/handle-tag-args');

var _handleTagArgs2 = _interopRequireDefault(_handleTagArgs);

var _delegatedApi = require('../../utils/delegated-api');

var _typeAssertions = require('../../errors/runtime/type-assertions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class TestingUnit {
    constructor(testFile, unitTypeName) {
        this.testFile = testFile;
        this.unitTypeName = unitTypeName;

        this.name = null;
        this.pageUrl = null;
        this.authCredentials = null;
        this.meta = {};
        this.only = false;
        this.skip = false;

        this.disablePageReloads = void 0;

        var unit = this;

        this.apiOrigin = function apiOrigin(...args) {
            return unit._add(...args);
        };

        (0, _delegatedApi.delegateAPI)(this.apiOrigin, this.constructor.API_LIST, { handler: this });
    }

    _add() {
        throw new Error('Not implemented');
    }

    _only$getter() {
        this.only = true;

        return this.apiOrigin;
    }

    _skip$getter() {
        this.skip = true;

        return this.apiOrigin;
    }

    _disablePageReloads$getter() {
        this.disablePageReloads = true;

        return this.apiOrigin;
    }

    _enablePageReloads$getter() {
        this.disablePageReloads = false;

        return this.apiOrigin;
    }

    _page$(url, ...rest) {
        this.pageUrl = (0, _handleTagArgs2.default)(url, rest);

        (0, _typeAssertions.assertType)(_typeAssertions.is.string, 'page', 'The page URL', this.pageUrl);

        (0, _testPageUrl.assertUrl)(this.pageUrl, 'page');

        this.pageUrl = (0, _testPageUrl.resolvePageUrl)(this.pageUrl, this.testFile.filename);

        return this.apiOrigin;
    }

    _httpAuth$(credentials) {
        (0, _typeAssertions.assertType)(_typeAssertions.is.nonNullObject, 'httpAuth', 'credentials', credentials);
        (0, _typeAssertions.assertType)(_typeAssertions.is.string, 'httpAuth', 'credentials.username', credentials.username);
        (0, _typeAssertions.assertType)(_typeAssertions.is.string, 'httpAuth', 'credentials.password', credentials.password);

        if (credentials.domain) (0, _typeAssertions.assertType)(_typeAssertions.is.string, 'httpAuth', 'credentials.domain', credentials.domain);
        if (credentials.workstation) (0, _typeAssertions.assertType)(_typeAssertions.is.string, 'httpAuth', 'credentials.workstation', credentials.workstation);

        this.authCredentials = credentials;

        return this.apiOrigin;
    }

    _meta$(...args) {
        (0, _typeAssertions.assertType)([_typeAssertions.is.string, _typeAssertions.is.nonNullObject], 'meta', `${this.unitTypeName}.meta`, args[0]);

        const data = typeof args[0] === 'string' ? { [args[0]]: args[1] } : args[0];

        (0, _keys2.default)(data).forEach(key => {
            this.meta[key] = data[key];
        });

        return this.apiOrigin;
    }

    static _makeAPIListForChildClass(ChildClass) {
        ChildClass.API_LIST = TestingUnit.API_LIST.concat((0, _delegatedApi.getDelegatedAPIList)(ChildClass.prototype));
    }
}

exports.default = TestingUnit;
TestingUnit.API_LIST = (0, _delegatedApi.getDelegatedAPIList)(TestingUnit.prototype);
module.exports = exports['default'];