'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.createRole = createRole;
exports.createAnonymousRole = createAnonymousRole;

var _events = require('events');

var _nanoid = require('nanoid');

var _nanoid2 = _interopRequireDefault(_nanoid);

var _phase = require('./phase');

var _phase2 = _interopRequireDefault(_phase);

var _typeAssertions = require('../errors/runtime/type-assertions');

var _wrapTestFunction = require('../api/wrap-test-function');

var _wrapTestFunction2 = _interopRequireDefault(_wrapTestFunction);

var _testPageUrl = require('../api/test-page-url');

var _actions = require('../test-run/commands/actions');

var _markerSymbol = require('./marker-symbol');

var _markerSymbol2 = _interopRequireDefault(_markerSymbol);

var _delay = require('../utils/delay');

var _delay2 = _interopRequireDefault(_delay);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const COOKIE_SYNC_DELAY = 100;

class Role extends _events.EventEmitter {
    constructor(loginPage, initFn, options = {}) {
        super();

        this[_markerSymbol2.default] = true;

        this.id = (0, _nanoid2.default)(7);
        this.phase = loginPage ? _phase2.default.uninitialized : _phase2.default.initialized;

        this.loginPage = loginPage;
        this.initFn = initFn;
        this.opts = options;

        this.url = null;
        this.stateSnapshot = null;
        this.initErr = null;
    }

    _navigateToLoginPage(testRun) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var navigateCommand = new _actions.NavigateToCommand({ url: _this.loginPage });

            yield testRun.executeCommand(navigateCommand);
        })();
    }

    _storeStateSnapshot(testRun) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!_this2.initErr) {
                // NOTE: give Hammerhead time to sync cookies from client
                yield (0, _delay2.default)(COOKIE_SYNC_DELAY);
                _this2.stateSnapshot = yield testRun.getStateSnapshot();
            }
        })();
    }

    _executeInitFn(testRun) {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            try {
                testRun.disableDebugBreakpoints = false;
                yield _this3.initFn(testRun);
            } catch (err) {
                _this3.initErr = err;
            } finally {
                testRun.disableDebugBreakpoints = true;
            }
        })();
    }

    initialize(testRun) {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this4.phase = _phase2.default.pendingInitialization;

            yield testRun.switchToCleanRun();
            yield _this4._navigateToLoginPage(testRun);
            yield _this4._executeInitFn(testRun);
            yield _this4._storeStateSnapshot(testRun);

            if (_this4.opts.preserveUrl) _this4.url = yield testRun.getCurrentUrl();

            _this4.phase = _phase2.default.initialized;
            _this4.emit('initialized');
        })();
    }
}

function createRole(loginPage, initFn, options = {}) {
    (0, _typeAssertions.assertType)(_typeAssertions.is.string, 'Role', '"loginPage" argument', loginPage);
    (0, _typeAssertions.assertType)(_typeAssertions.is.function, 'Role', '"initFn" argument', initFn);
    (0, _typeAssertions.assertType)(_typeAssertions.is.nonNullObject, 'Role', '"options" argument', options);

    if (options.preserveUrl !== void 0) (0, _typeAssertions.assertType)(_typeAssertions.is.boolean, 'Role', '"preserveUrl" option', options.preserveUrl);

    loginPage = (0, _testPageUrl.resolvePageUrl)(loginPage);
    initFn = (0, _wrapTestFunction2.default)(initFn);

    return new Role(loginPage, initFn, options);
}

function createAnonymousRole() {
    return new Role(null, null);
}