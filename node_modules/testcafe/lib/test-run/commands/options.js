'use strict';

exports.__esModule = true;
exports.AssertionOptions = exports.ResizeToFitDeviceOptions = exports.DragToElementOptions = exports.TypeOptions = exports.MoveOptions = exports.ClickOptions = exports.MouseOptions = exports.ElementScreenshotOptions = exports.ScrollOptions = exports.OffsetOptions = exports.ActionOptions = exports.speedOption = exports.booleanOption = exports.positiveIntegerOption = exports.integerOption = undefined;

var _assignable = require('../../utils/assignable');

var _assignable2 = _interopRequireDefault(_assignable);

var _factories = require('./validations/factories');

var _testRun = require('../../errors/test-run');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var integerOption = exports.integerOption = (0, _factories.createIntegerValidator)(_testRun.ActionIntegerOptionError); // -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------

var positiveIntegerOption = exports.positiveIntegerOption = (0, _factories.createPositiveIntegerValidator)(_testRun.ActionPositiveIntegerOptionError);
var booleanOption = exports.booleanOption = (0, _factories.createBooleanValidator)(_testRun.ActionBooleanOptionError);
var speedOption = exports.speedOption = (0, _factories.createSpeedValidator)(_testRun.ActionSpeedOptionError);

// Acitons
class ActionOptions extends _assignable2.default {
    constructor(obj, validate) {
        super();

        this.speed = null;

        this._assignFrom(obj, validate);
    }

    _getAssignableProperties() {
        return [{ name: 'speed', type: speedOption }];
    }
}

exports.ActionOptions = ActionOptions; // Offset

class OffsetOptions extends ActionOptions {
    constructor(obj, validate) {
        super();

        this.offsetX = null;
        this.offsetY = null;

        this._assignFrom(obj, validate);
    }

    _getAssignableProperties() {
        return super._getAssignableProperties().concat([{ name: 'offsetX', type: integerOption }, { name: 'offsetY', type: integerOption }]);
    }
}

exports.OffsetOptions = OffsetOptions;
class ScrollOptions extends OffsetOptions {
    constructor(obj, validate) {
        super();

        this.scrollToCenter = false;
        this.skipParentFrames = false;

        this._assignFrom(obj, validate);
    }

    _getAssignableProperties() {
        return super._getAssignableProperties().concat([{ name: 'scrollToCenter', type: booleanOption }, { name: 'skipParentFrames', type: booleanOption }]);
    }
}

exports.ScrollOptions = ScrollOptions; // Element Screenshot

class ElementScreenshotOptions extends ActionOptions {
    constructor(obj, validate) {
        super();

        this.scrollTargetX = null;
        this.scrollTargetY = null;
        this.includeMargins = false;
        this.includeBorders = true;
        this.includePaddings = true;

        this.crop = {
            left: null,
            right: null,
            top: null,
            bottom: null
        };

        this._assignFrom(obj, validate);
    }

    _getAssignableProperties() {
        return super._getAssignableProperties().concat([{ name: 'scrollTargetX', type: integerOption }, { name: 'scrollTargetY', type: integerOption }, { name: 'crop.left', type: integerOption }, { name: 'crop.right', type: integerOption }, { name: 'crop.top', type: integerOption }, { name: 'crop.bottom', type: integerOption }, { name: 'includeMargins', type: booleanOption }, { name: 'includeBorders', type: booleanOption }, { name: 'includePaddings', type: booleanOption }]);
    }
}

exports.ElementScreenshotOptions = ElementScreenshotOptions; // Mouse

class MouseOptions extends OffsetOptions {
    constructor(obj, validate) {
        super();

        this.modifiers = {
            ctrl: false,
            alt: false,
            shift: false,
            meta: false
        };

        this._assignFrom(obj, validate);
    }

    _getAssignableProperties() {
        return super._getAssignableProperties().concat([{ name: 'modifiers.ctrl', type: booleanOption }, { name: 'modifiers.alt', type: booleanOption }, { name: 'modifiers.shift', type: booleanOption }, { name: 'modifiers.meta', type: booleanOption }]);
    }
}

exports.MouseOptions = MouseOptions; // Click

class ClickOptions extends MouseOptions {
    constructor(obj, validate) {
        super();

        this.caretPos = null;

        this._assignFrom(obj, validate);
    }

    _getAssignableProperties() {
        return super._getAssignableProperties().concat([{ name: 'caretPos', type: positiveIntegerOption }]);
    }
}

exports.ClickOptions = ClickOptions; // Move

class MoveOptions extends MouseOptions {
    constructor(obj, validate) {
        super();

        this.speed = null;
        this.minMovingTime = null;
        this.holdLeftButton = false;
        this.skipScrolling = false;
        this.skipDefaultDragBehavior = false;

        this._assignFrom(obj, validate);
    }

    _getAssignableProperties() {
        return super._getAssignableProperties().concat([{ name: 'speed' }, { name: 'minMovingTime' }, { name: 'holdLeftButton' }, { name: 'skipScrolling', type: booleanOption }, { name: 'skipDefaultDragBehavior', type: booleanOption }]);
    }
}

exports.MoveOptions = MoveOptions; // Type

class TypeOptions extends ClickOptions {
    constructor(obj, validate) {
        super();

        this.replace = false;
        this.paste = false;

        this._assignFrom(obj, validate);
    }

    _getAssignableProperties() {
        return super._getAssignableProperties().concat([{ name: 'replace', type: booleanOption }, { name: 'paste', type: booleanOption }]);
    }
}

exports.TypeOptions = TypeOptions; // DragToElement

class DragToElementOptions extends MouseOptions {
    constructor(obj, validate) {
        super(obj, validate);

        this.destinationOffsetX = null;
        this.destinationOffsetY = null;

        this._assignFrom(obj, validate);
    }

    _getAssignableProperties() {
        return super._getAssignableProperties().concat([{ name: 'destinationOffsetX', type: integerOption }, { name: 'destinationOffsetY', type: integerOption }]);
    }
}

exports.DragToElementOptions = DragToElementOptions; //ResizeToFitDevice

class ResizeToFitDeviceOptions extends _assignable2.default {
    constructor(obj, validate) {
        super();

        this.portraitOrientation = false;

        this._assignFrom(obj, validate);
    }

    _getAssignableProperties() {
        return [{ name: 'portraitOrientation', type: booleanOption }];
    }
}

exports.ResizeToFitDeviceOptions = ResizeToFitDeviceOptions; //Assertion

class AssertionOptions extends _assignable2.default {
    constructor(obj, validate) {
        super();

        this.timeout = void 0;
        this.allowUnawaitedPromise = false;

        this._assignFrom(obj, validate);
    }

    _getAssignableProperties() {
        return [{ name: 'timeout', type: positiveIntegerOption }, { name: 'allowUnawaitedPromise', type: booleanOption }];
    }
}
exports.AssertionOptions = AssertionOptions;