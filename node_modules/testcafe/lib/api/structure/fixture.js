'use strict';

exports.__esModule = true;

var _typeAssertions = require('../../errors/runtime/type-assertions');

var _handleTagArgs = require('../../utils/handle-tag-args');

var _handleTagArgs2 = _interopRequireDefault(_handleTagArgs);

var _testingUnit = require('./testing-unit');

var _testingUnit2 = _interopRequireDefault(_testingUnit);

var _wrapTestFunction = require('../wrap-test-function');

var _wrapTestFunction2 = _interopRequireDefault(_wrapTestFunction);

var _assertType = require('../request-hooks/assert-type');

var _assertType2 = _interopRequireDefault(_assertType);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Fixture extends _testingUnit2.default {
    constructor(testFile) {
        super(testFile, 'fixture');

        this.path = testFile.filename;

        this.pageUrl = 'about:blank';

        this.beforeEachFn = null;
        this.afterEachFn = null;

        this.beforeFn = null;
        this.afterFn = null;

        this.requestHooks = [];

        return this.apiOrigin;
    }

    _add(name, ...rest) {
        name = (0, _handleTagArgs2.default)(name, rest);

        (0, _typeAssertions.assertType)(_typeAssertions.is.string, 'apiOrigin', 'The fixture name', name);

        this.name = name;
        this.testFile.currentFixture = this;

        return this.apiOrigin;
    }

    _before$(fn) {
        (0, _typeAssertions.assertType)(_typeAssertions.is.function, 'before', 'fixture.before hook', fn);

        this.beforeFn = fn;

        return this.apiOrigin;
    }

    _after$(fn) {
        (0, _typeAssertions.assertType)(_typeAssertions.is.function, 'after', 'fixture.after hook', fn);

        this.afterFn = fn;

        return this.apiOrigin;
    }

    _beforeEach$(fn) {
        (0, _typeAssertions.assertType)(_typeAssertions.is.function, 'beforeEach', 'fixture.beforeEach hook', fn);

        this.beforeEachFn = (0, _wrapTestFunction2.default)(fn);

        return this.apiOrigin;
    }

    _afterEach$(fn) {
        (0, _typeAssertions.assertType)(_typeAssertions.is.function, 'afterEach', 'fixture.afterEach hook', fn);

        this.afterEachFn = (0, _wrapTestFunction2.default)(fn);

        return this.apiOrigin;
    }

    _requestHooks$(...hooks) {
        hooks = (0, _lodash.flattenDeep)(hooks);

        (0, _assertType2.default)(hooks);

        this.requestHooks = hooks;

        return this.apiOrigin;
    }
}

exports.default = Fixture;
_testingUnit2.default._makeAPIListForChildClass(Fixture);
module.exports = exports['default'];