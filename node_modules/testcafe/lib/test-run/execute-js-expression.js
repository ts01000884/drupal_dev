'use strict';

exports.__esModule = true;
exports.executeJsExpression = executeJsExpression;

var _vm = require('vm');

var _selectorBuilder = require('../client-functions/selectors/selector-builder');

var _selectorBuilder2 = _interopRequireDefault(_selectorBuilder);

var _clientFunctionBuilder = require('../client-functions/client-function-builder');

var _clientFunctionBuilder2 = _interopRequireDefault(_clientFunctionBuilder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var contextsInfo = [];

function getContextInfo(testRun) {
    var contextInfo = contextsInfo.find(info => info.testRun === testRun);

    if (!contextInfo) {
        contextInfo = { testRun, context: createExecutionContext(testRun), options: {} };

        contextsInfo.push(contextInfo);
    }

    return contextInfo;
}

function getContext(testRun, options = {}) {
    var contextInfo = getContextInfo(testRun);

    contextInfo.options = options;

    return contextInfo.context;
}

function createExecutionContext(testRun) {
    var sandbox = {
        Selector: (fn, options = {}) => {
            var skipVisibilityCheck = getContextInfo(testRun).options.skipVisibilityCheck;

            if (skipVisibilityCheck) options.visibilityCheck = false;

            if (testRun && testRun.id) options.boundTestRun = testRun;

            var builder = new _selectorBuilder2.default(fn, options, { instantiation: 'Selector' });

            return builder.getFunction();
        },

        ClientFunction: (fn, options = {}) => {
            if (testRun && testRun.id) options.boundTestRun = testRun;

            var builder = new _clientFunctionBuilder2.default(fn, options, { instantiation: 'ClientFunction' });

            return builder.getFunction();
        }
    };

    return (0, _vm.createContext)(sandbox);
}

function executeJsExpression(expression, testRun, skipVisibilityCheck) {
    const context = getContext(testRun, { skipVisibilityCheck });

    return (0, _vm.runInContext)(expression, context, { displayErrors: false });
}