'use strict';

exports.__esModule = true;
exports.MaximizeWindowCommand = exports.ResizeWindowToFitDeviceCommand = exports.ResizeWindowCommand = exports.TakeScreenshotOnFailCommand = exports.TakeElementScreenshotCommand = exports.TakeScreenshotCommand = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _type = require('./type');

var _type2 = _interopRequireDefault(_type);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _options = require('./options');

var _initializers = require('./validations/initializers');

var _argument = require('./validations/argument');

var _generateMark = require('../../screenshots/generate-mark');

var _generateMark2 = _interopRequireDefault(_generateMark);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function initResizeToFitDeviceOptions(name, val) {
    return new _options.ResizeToFitDeviceOptions(val, true);
}

function initElementScreenshotOptions(name, val) {
    return new _options.ElementScreenshotOptions(val, true);
}

// Commands
class TakeScreenshotBaseCommand extends _base2.default {
    constructor(obj, testRun, type) {
        super(obj, testRun, type);

        this.markSeed = null;
        this.markData = '';
    }

    generateScreenshotMark() {
        (0, _assign2.default)(this, (0, _generateMark2.default)());
    }
}

class TakeScreenshotCommand extends TakeScreenshotBaseCommand {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.takeScreenshot);
    }

    _getAssignableProperties() {
        return [{ name: 'path', type: _argument.nonEmptyStringArgument, defaultValue: '' }];
    }
}

exports.TakeScreenshotCommand = TakeScreenshotCommand;
class TakeElementScreenshotCommand extends TakeScreenshotBaseCommand {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.takeElementScreenshot);
    }

    _getAssignableProperties() {
        return [{ name: 'selector', init: _initializers.initSelector, required: true }, { name: 'options', init: initElementScreenshotOptions, required: true }, { name: 'path', type: _argument.nonEmptyStringArgument, defaultValue: '' }];
    }
}

exports.TakeElementScreenshotCommand = TakeElementScreenshotCommand;
class TakeScreenshotOnFailCommand extends TakeScreenshotBaseCommand {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.takeScreenshotOnFail);
    }

    _getAssignableProperties() {
        return [];
    }
}

exports.TakeScreenshotOnFailCommand = TakeScreenshotOnFailCommand;
class ResizeWindowCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.resizeWindow);
    }

    _getAssignableProperties() {
        return [{ name: 'width', type: _argument.positiveIntegerArgument, required: true }, { name: 'height', type: _argument.positiveIntegerArgument, required: true }];
    }
}

exports.ResizeWindowCommand = ResizeWindowCommand;
class ResizeWindowToFitDeviceCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.resizeWindowToFitDevice);
    }

    _getAssignableProperties() {
        return [{ name: 'device', type: _argument.resizeWindowDeviceArgument, required: true }, { name: 'options', type: _argument.actionOptions, init: initResizeToFitDeviceOptions, required: true }];
    }
}

exports.ResizeWindowToFitDeviceCommand = ResizeWindowToFitDeviceCommand;
class MaximizeWindowCommand {
    constructor() {
        this.type = _type2.default.maximizeWindow;
    }
}
exports.MaximizeWindowCommand = MaximizeWindowCommand;