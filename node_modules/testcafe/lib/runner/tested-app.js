'use strict';

exports.__esModule = true;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _child_process = require('child_process');

var _path = require('path');

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _treeKill = require('tree-kill');

var _treeKill2 = _interopRequireDefault(_treeKill);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _delay = require('../utils/delay');

var _delay2 = _interopRequireDefault(_delay);

var _runtime = require('../errors/runtime');

var _message = require('../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MODULES_BIN_DIR = (0, _path.join)(process.cwd(), './node_modules/.bin');

const ENV_PATH_KEY = function () {
    if (_osFamily2.default.win) {
        var pathKey = 'Path';

        (0, _keys2.default)(process.env).forEach(key => {
            if (key.toLowerCase() === 'path') pathKey = key;
        });

        return pathKey;
    }

    return 'PATH';
}();

class TestedApp {
    constructor() {
        this.process = null;
        this.errorPromise = null;
        this.killed = false;
    }

    start(command, initDelay) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this.errorPromise = new _pinkie2.default(function (resolve, reject) {
                var env = (0, _assign2.default)({}, process.env);
                var path = env[ENV_PATH_KEY] || '';
                var pathParts = path.split(_path.delimiter);

                pathParts.unshift(MODULES_BIN_DIR);

                env[ENV_PATH_KEY] = pathParts.join(_path.delimiter);

                _this.process = (0, _child_process.exec)(command, { env }, function (err) {
                    if (!_this.killed && err) {
                        var message = err.stack || String(err);

                        reject(new _runtime.GeneralError(_message2.default.testedAppFailedWithError, message));
                    }
                });
            });

            yield _pinkie2.default.race([(0, _delay2.default)(initDelay), _this.errorPromise]);
        })();
    }

    kill() {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this2.killed = true;

            var killPromise = new _pinkie2.default(function (resolve) {
                return (0, _treeKill2.default)(_this2.process.pid, 'SIGTERM', resolve);
            });

            yield killPromise;
        })();
    }
}
exports.default = TestedApp;
module.exports = exports['default'];