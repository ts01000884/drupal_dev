'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let getDefaultDirs = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (baseDir) {
        return yield (0, _globby2.default)(DEFAULT_TEST_LOOKUP_DIRS, {
            cwd: baseDir,
            nocase: true,
            onlyDirectories: true,
            onlyFiles: false
        });
    });

    return function getDefaultDirs(_x) {
        return _ref.apply(this, arguments);
    };
})();

let convertDirsToGlobs = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* (fileList, baseDir) {
        fileList = yield _pinkie2.default.all(fileList.map((() => {
            var _ref3 = (0, _asyncToGenerator3.default)(function* (file) {
                if (!(0, _isGlob2.default)(file)) {
                    const absPath = _path2.default.resolve(baseDir, file);
                    let fileStat = null;

                    try {
                        fileStat = yield (0, _promisifiedFunctions.stat)(absPath);
                    } catch (err) {
                        return null;
                    }

                    if (fileStat.isDirectory()) return _path2.default.join(file, TEST_FILE_GLOB_PATTERN);
                }

                return file;
            });

            return function (_x4) {
                return _ref3.apply(this, arguments);
            };
        })()));

        return fileList.filter(function (file) {
            return !!file;
        });
    });

    return function convertDirsToGlobs(_x2, _x3) {
        return _ref2.apply(this, arguments);
    };
})();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _globby = require('globby');

var _globby2 = _interopRequireDefault(_globby);

var _isGlob = require('is-glob');

var _isGlob2 = _interopRequireDefault(_isGlob);

var _compiler = require('../compiler');

var _compiler2 = _interopRequireDefault(_compiler);

var _lodash = require('lodash');

var _promisifiedFunctions = require('../utils/promisified-functions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_TEST_LOOKUP_DIRS = ['test/', 'tests/'];
const TEST_FILE_GLOB_PATTERN = `./**/*@(${_compiler2.default.getSupportedTestFileExtensions().join('|')})`;

exports.default = (() => {
    var _ref4 = (0, _asyncToGenerator3.default)(function* (fileList, baseDir) {
        if ((0, _lodash.isEmpty)(fileList)) fileList = yield getDefaultDirs(baseDir);

        fileList = yield convertDirsToGlobs(fileList, baseDir);
        fileList = yield (0, _globby2.default)(fileList, { cwd: baseDir });

        return fileList.map(function (file) {
            return _path2.default.resolve(baseDir, file);
        });
    });

    function parseFileList(_x5, _x6) {
        return _ref4.apply(this, arguments);
    }

    return parseFileList;
})();

module.exports = exports['default'];